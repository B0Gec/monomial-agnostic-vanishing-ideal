{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"jax.ipynb のコピー","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNC6W3FBKVw9zPRpWv1Tl/7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3_1bp8egqr67","executionInfo":{"status":"ok","timestamp":1628262251261,"user_tz":-540,"elapsed":7,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"837a3ed2-0f61-48cd-8195-baffd330986c"},"source":["# -------------------------\n","# If you use Google Colab\n","# -------------------------\n","# Run this cell to mount your Google Drive.\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","%cd \"/content/drive/MyDrive/Colab Notebooks/mavi\""],"execution_count":129,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","/content/drive/MyDrive/Colab Notebooks/mavi\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"txJI9riTrGUy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628262254828,"user_tz":-540,"elapsed":3571,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"4aa99199-fb40-417b-dbc5-76c4fea26cbc"},"source":["import numpy as np \n","import jax.numpy as jnp\n","import jax\n","from jax import device_put, jit, partial\n","import torch\n","import matplotlib.pyplot as plt\n","key = jax.random.PRNGKey(0)\n","\n","!pip install memory_profiler\n","%load_ext memory_profiler"],"execution_count":130,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: memory_profiler in /usr/local/lib/python3.7/dist-packages (0.58.0)\n","Requirement already satisfied: psutil in /usr/local/lib/python3.7/dist-packages (from memory_profiler) (5.4.8)\n","The memory_profiler extension is already loaded. To reload it, use:\n","  %reload_ext memory_profiler\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"E6GJ-is_3AvJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628262259094,"user_tz":-540,"elapsed":380,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"5f29c65d-d7e8-431f-e1b2-1eeb74ae61df"},"source":["%load_ext autoreload\n","%autoreload 2\n","from mavi.vanishing_ideal import VanishingIdeal\n","from mavi.util.preprocessing import Preprocessor"],"execution_count":131,"outputs":[{"output_type":"stream","text":["The autoreload extension is already loaded. To reload it, use:\n","  %reload_ext autoreload\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sUlTg0xdn-xR"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FAyd4-CR0vl-"},"source":["## Compare three backends `jax`, `numpy`, `pytorch`\n","---"]},{"cell_type":"markdown","metadata":{"id":"NPqt4vL10zy9"},"source":["### jax"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dAdhm_hyzU5Y","executionInfo":{"status":"ok","timestamp":1628260133601,"user_tz":-540,"elapsed":1945,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"4d602205-92cc-4a1d-f3bb-de4b30ed94b6"},"source":["# X = device_put(jax.random.normal(key, (10, 10)))\n","X = jax.random.normal(key, (2000, 100))\n","%memit X"],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 1041.01 MiB, increment: 0.04 MiB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_5KZUk1G3Huh"},"source":["def ged(A, B, gamma=1e-9):\n","    '''\n","    Reduce GED to two SVD\n","    '''\n","    Vb, db, _ = jnp.linalg.svd(B)\n","    db += gamma \n","    Vb_ = Vb / (db**0.5)\n","\n","    A_ = Vb_.T @ A @ Vb_\n","    Va, d, _ = jnp.linalg.svd(A_)\n","    V = Vb_ @ Va\n","\n","    return d, V"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"m3hd08Q8urJp"},"source":["@jit\n","def indirect_ged(A, B, gamma=1e-9):\n","    '''\n","    Reduce GED to two SVD\n","    '''\n","    Vb, db, _ = jnp.linalg.svd(B)\n","    db += gamma \n","    Vb_ = Vb / (db**0.5)\n","\n","    A_ = Vb_.T @ A @ Vb_\n","    Va, d, _ = jnp.linalg.svd(A_)\n","    V = Vb_ @ Va\n","\n","    return d, V\n","\n","# @partial(jit, static_argnums=(1,2,))\n","def matrixfact_gep(C, N, gamma=1e-9):\n","    '''\n","    Unfortunately, jax.scipy.linalg.eigh is the only way of solving generalied eigenvalue problem but it is not implmented yet.\n","    Instead of directly solving generalized eigenvalue problem, we reduce the problem to an eigenvalue problem\n","    '''\n","    A = C.T @ C\n","    B = N.T @ N\n","    # r = np.linalg.matrix_rank(B, gamma)\n","    gamma_ = jnp.mean(jnp.diag(B))*gamma\n","    d, V = indirect_ged(A, B, gamma=gamma_)\n","    d = jnp.sqrt(np.abs(d))\n","\n","    # gnorms = jnp.diag(V.T@B@V)\n","    # valid = jnp.argsort(-gnorms)#[:r]\n","\n","    # d, V = d[valid], V[:, valid]\n","    # gnorms = gnorms[valid]\n","   \n","    perm = jnp.argsort(-d)\n","\n","    # return d[perm], V[:, perm]\n","    return d, V"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1KVtivhcx5Wl","executionInfo":{"status":"ok","timestamp":1628261967378,"user_tz":-540,"elapsed":392,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"2dc3eed5-9243-4bb9-ef8a-c24e09cd0517"},"source":["%time\n","g = jit(ged)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 3 µs, sys: 0 ns, total: 3 µs\n","Wall time: 6.91 µs\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zwwR3Ns326sR","executionInfo":{"status":"ok","timestamp":1628261981332,"user_tz":-540,"elapsed":3,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"c47e480b-9148-4a34-ffe4-b6172c0e76f6"},"source":["%time\n","_ = ged(X.T@X,X.T@X);"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 2 µs, sys: 1e+03 ns, total: 3 µs\n","Wall time: 6.2 µs\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8K2403Bc3FpP","executionInfo":{"status":"ok","timestamp":1628261978553,"user_tz":-540,"elapsed":348,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"81e1d9a5-48f1-4cfc-b6ed-fa2d4683834b"},"source":["%time\n","_ = g(X.T@X,X.T@X);"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 2 µs, sys: 0 ns, total: 2 µs\n","Wall time: 6.2 µs\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AAcYR5ju2whA","executionInfo":{"status":"ok","timestamp":1628259967363,"user_tz":-540,"elapsed":535,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"049965cd-c285-46b5-835f-b16c74c1d36d"},"source":["g(X.T@X,X.T@X)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(DeviceArray([1.0000005 , 1.0000001 , 1.        , 0.99999994, 0.99999976,\n","              0.9999996 , 0.99999917, 0.9999991 , 0.999999  , 0.9999985 ],            dtype=float32),\n"," DeviceArray([[ 0.42481217,  0.0199103 , -0.05106542, -0.07252391,\n","                0.01366739, -0.06743237, -0.02541222, -0.00092123,\n","                0.02067676,  0.10294998],\n","              [ 0.12318107, -0.02037862,  0.0399007 ,  0.0538552 ,\n","                0.02539378, -0.10515485, -0.02586236,  0.01369648,\n","                0.20283782, -0.05967629],\n","              [ 0.06482884, -0.00286435,  0.15998216, -0.0553296 ,\n","                0.16263635,  0.02771977,  0.04015245,  0.07070391,\n","               -0.02420025,  0.00425383],\n","              [-0.16828457,  0.02849521, -0.1480918 ,  0.01394353,\n","               -0.01770331, -0.05810959,  0.05579319,  0.13026561,\n","                0.03817441,  0.01921332],\n","              [-0.17483982,  0.02108183, -0.0286969 , -0.05276608,\n","                0.04556872,  0.03671596,  0.07742073, -0.10166556,\n","                0.12423564,  0.04245446],\n","              [ 0.2790043 ,  0.08232342,  0.08193745,  0.02044209,\n","               -0.08509808,  0.08337079,  0.04544356,  0.01278369,\n","                0.02522409, -0.04340474],\n","              [ 0.05610061,  0.05350461, -0.08034812,  0.20420034,\n","                0.10310859, -0.06987282,  0.00264336, -0.04697999,\n","               -0.07040267, -0.02224051],\n","              [ 0.11505768, -0.05788862,  0.08282898,  0.0921592 ,\n","               -0.06587518, -0.11215302,  0.09121165, -0.01902433,\n","               -0.05143293,  0.01936344],\n","              [-0.15930359,  0.0105245 ,  0.12236949,  0.19616772,\n","               -0.02508649,  0.05859239, -0.03573081,  0.02743626,\n","                0.05468836,  0.0865804 ],\n","              [ 0.24134295, -0.06179612, -0.13226695,  0.10097814,\n","                0.02921891,  0.16300377,  0.02191737,  0.01614113,\n","                0.03102075, -0.00447776]], dtype=float32))"]},"metadata":{"tags":[]},"execution_count":136}]},{"cell_type":"code","metadata":{"id":"vrV1fHPTyCYy"},"source":["def indirect_ged(A, B, gamma=1e-9):\n","    '''\n","    Reduce GED to two SVD\n","    '''\n","    Vb, db, _ = jnp.linalg.svd(B)\n","    db += gamma \n","    Vb_ = Vb / (db**0.5)\n","\n","    A_ = Vb_.T @ A @ Vb_\n","    Va, d, _ = jnp.linalg.svd(A_)\n","    V = Vb_ @ Va\n","\n","    return d, V\n","\n","\n","def matrixfact_gep(C, N, gamma=1e-9):\n","    '''\n","    Unfortunately, jax.scipy.linalg.eigh is the only way of solving generalied eigenvalue problem but it is not implmented yet.\n","    Instead of directly solving generalized eigenvalue problem, we reduce the problem to an eigenvalue problem\n","    '''\n","    A = C.T @ C\n","    B = N.T @ N\n","    r = jnp.linalg.matrix_rank(B, gamma)\n","    gamma_ = jnp.mean(jnp.diag(B))*gamma\n","    d, V = indirect_ged(A, B, gamma=gamma_)\n","    d = jnp.sqrt(jnp.abs(d))\n","\n","    gnorms = jnp.diag(V.T@B@V)\n","    valid = jnp.argsort(-gnorms)[:r]\n","\n","    d, V = d[valid], V[:, valid]\n","    gnorms = gnorms[valid]\n","   \n","    perm = jnp.argsort(-d)\n","\n","    return d[perm], V[:, perm]\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pECm3qOz4EAo"},"source":["def indirect_ged2(A, B, gamma=1e-9):\n","    '''\n","    Reduce GED to two SVD\n","    '''\n","    _, db, Vbt = jnp.linalg.svd(B)\n","    Vb_ = Vbt.T / (db + gamma)\n","\n","    A_ = A @ Vb_\n","    _, d, Vat = jnp.linalg.svd(A_)\n","    V = Vb_ @ Vat.T\n","\n","    return d, V\n","\n","\n","def matrixfact_gep2(C, N, gamma=1e-9):\n","    '''\n","    Unfortunately, jax.scipy.linalg.eigh is the only way of solving generalied eigenvalue problem but it is not implmented yet.\n","    Instead of directly solving generalized eigenvalue problem, we reduce the problem to an eigenvalue problem\n","    '''\n","    A = C\n","    B = N\n","    r = jnp.linalg.matrix_rank(B, gamma)\n","    gamma_ = jnp.mean(np.diag(B))*gamma\n","    print(gamma_)\n","    d, V = indirect_ged2(A, B, gamma=gamma_)\n","\n","    gnorms = jnp.linalg.norm(B@V, axis=0)\n","    valid = jnp.argsort(-gnorms)[:r]\n","\n","    d, V = d[valid], V[:, valid]\n","    gnorms = gnorms[valid]\n","   \n","    perm = jnp.argsort(-d)\n","\n","    return d[perm], V[:, perm]\n","\n","def matrixfact_gep3(C, N, gamma=1e-9):\n","    A = C.T @ C\n","    B = N.T @ N\n","    r = np.linalg.matrix_rank(B, gamma)\n","    gamma_ = np.mean(np.diag(B))*gamma\n","    d, V = eigh(A, B+gamma_*np.identity(B.shape[0]))\n","    # d, V = indirect_ged(A, B, gamma=gamma)  a bit slower\n","    d = np.sqrt(np.abs(d))\n","\n","    gnorms = np.diag(V.T@B@V)\n","    valid = np.argsort(-gnorms)[:r]\n","\n","    d, V = d[valid], V[:, valid]\n","    gnorms = gnorms[valid]\n","   \n","    perm = np.argsort(-d)\n","\n","    return d[perm], V[:, perm]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LvUlrd-A4eLF"},"source":["X = jax.random.normal(key, (200, 100))\n","Y = jax.random.normal(key, (1000, 100))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oXRT6xxp4wq4","executionInfo":{"status":"ok","timestamp":1628261885709,"user_tz":-540,"elapsed":1514,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"1eb03f41-769e-48a1-cd5c-f9b8a110fa84"},"source":["%%time\n","%memit d1, V1 = matrixfact_gep(X, Y, gamma=1e-9);"],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 1617.90 MiB, increment: 0.00 MiB\n","CPU times: user 203 ms, sys: 55.6 ms, total: 258 ms\n","Wall time: 379 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3sYlmqE_46qM","executionInfo":{"status":"ok","timestamp":1628261885710,"user_tz":-540,"elapsed":8,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"f5f5f9eb-43df-48a7-aa08-370657375a2f"},"source":["%%time\n","%memit d2, V2 = matrixfact_gep2(X, Y, gamma=1e-12);"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2.0018851e-14\n","2.0018851e-14\n","peak memory: 1617.90 MiB, increment: 0.00 MiB\n","CPU times: user 208 ms, sys: 57.5 ms, total: 265 ms\n","Wall time: 388 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Df5hqIDj8p62","executionInfo":{"status":"ok","timestamp":1628261886908,"user_tz":-540,"elapsed":1202,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"93f4a186-fb07-47fb-f952-6e0e73da6ed8"},"source":["%%time\n","%memit d3, V3 = matrixfact_gep3(X, Y, gamma=1e-9);"],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 1617.90 MiB, increment: 0.00 MiB\n","CPU times: user 156 ms, sys: 156 ms, total: 312 ms\n","Wall time: 363 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"xo5lBUyd7MC9","executionInfo":{"status":"ok","timestamp":1628261898368,"user_tz":-540,"elapsed":431,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"b75d1c4d-282e-42a1-9627-19280d9d1a2a"},"source":["plt.plot(d1)\n","plt.plot(d2, '--')\n","plt.plot(d3, '-.')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f3423b0c310>]"]},"metadata":{"tags":[]},"execution_count":117},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"F9qbrDx08SP0"},"source":["from scipy.linalg import eigh"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cDlYGvO77xBa","executionInfo":{"status":"ok","timestamp":1628261770232,"user_tz":-540,"elapsed":3,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"8f2f8f19-7158-4c39-d79d-42c07e39e075"},"source":["d2[-1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DeviceArray(1.0194227, dtype=float32)"]},"metadata":{"tags":[]},"execution_count":109}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"226c9Uga9c2y","executionInfo":{"status":"ok","timestamp":1628261768162,"user_tz":-540,"elapsed":4,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"29dbb754-3a03-4e4e-ab50-2d9aa2d86b2d"},"source":["d3[-1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["7.387703e-05"]},"metadata":{"tags":[]},"execution_count":108}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iqJhH52M9giR","executionInfo":{"status":"ok","timestamp":1628261765335,"user_tz":-540,"elapsed":346,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"5ae1b80d-b726-49bc-c028-d3398d2bff1d"},"source":["d1[-1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DeviceArray(0.00014154, dtype=float32)"]},"metadata":{"tags":[]},"execution_count":107}]},{"cell_type":"code","metadata":{"id":"BkA2Bo5KwpxW"},"source":["f = jit(matrixfact_gep)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WKUs0dMqv7-6","executionInfo":{"status":"ok","timestamp":1628258396810,"user_tz":-540,"elapsed":1002,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"d22f9f3e-8353-4132-ee98-35dd179e4eb9"},"source":["%%time\n","_ = f(X[:100, :100])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 2.03 ms, sys: 2.02 ms, total: 4.05 ms\n","Wall time: 3.37 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VL02I5lxwiKI","executionInfo":{"status":"ok","timestamp":1628258334570,"user_tz":-540,"elapsed":360,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"15d618f0-0138-4217-a604-1d550f3b5384"},"source":["%%time\n","_ = jnp.linalg.svd(X[:100, :100])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 3.97 ms, sys: 108 µs, total: 4.08 ms\n","Wall time: 3.35 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OsXqRT_fu2xX","executionInfo":{"status":"ok","timestamp":1628257936631,"user_tz":-540,"elapsed":2318,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"a378fef9-9135-4de1-bd43-498ee89ff99f"},"source":["jit(dblow)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[autoreload of mavi.jax.util.util failed: Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.7/dist-packages/IPython/extensions/autoreload.py\", line 247, in check\n","    superreload(m, reload, self.old_objects)\n","TypeError: jit() got an unexpected keyword argument 'static_arguments'\n","]\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<CompiledFunction at 0x7fb5c81631f0>"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wMPWJcWvpQvl","executionInfo":{"status":"ok","timestamp":1628262160014,"user_tz":-540,"elapsed":825,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"efab2bec-8031-4d8d-dcc5-81da0916aa6e"},"source":["%%time\n","vi = VanishingIdeal()\n","%memit vi.fit(X, 0.01, method=\"vca\", backend='jax') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 1639.04 MiB, increment: 0.00 MiB\n","CPU times: user 323 ms, sys: 58.6 ms, total: 382 ms\n","Wall time: 487 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YaV-WnvAo9J9","executionInfo":{"status":"ok","timestamp":1628257312382,"user_tz":-540,"elapsed":4230,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"a7609378-ab7f-460c-fc21-eede900dcd8a"},"source":["%%time\n","vi = VanishingIdeal()\n","%memit vi.fit(X, 0.01, method=\"vca\", backend='jax') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 2398.77 MiB, increment: 0.00 MiB\n","CPU times: user 1.47 s, sys: 218 ms, total: 1.69 s\n","Wall time: 1.78 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_9g0CxuUqFhl","executionInfo":{"status":"ok","timestamp":1628257323406,"user_tz":-540,"elapsed":519,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"64368362-0577-4e8b-8ba7-6210a0354a40"},"source":["%%time\n","_ = vi.evaluate(X)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 468 µs, sys: 0 ns, total: 468 µs\n","Wall time: 448 µs\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vvGETyZ0qSzf","executionInfo":{"status":"ok","timestamp":1628257319507,"user_tz":-540,"elapsed":1320,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"a71f3dc0-8262-4f10-eabe-5b6806c1b26b"},"source":["%%time\n","_ = vi._evaluate(vi.basis, X)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 164 ms, sys: 9.88 ms, total: 174 ms\n","Wall time: 752 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NzPkDNmxsyc4","executionInfo":{"status":"ok","timestamp":1628257358817,"user_tz":-540,"elapsed":3,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"156bf5a8-0f98-4507-b067-3b28ac3e6334"},"source":["%%time\n","_ = vi.gradient(X)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 713 µs, sys: 0 ns, total: 713 µs\n","Wall time: 728 µs\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LDEE55BFo-sD","executionInfo":{"status":"ok","timestamp":1628257360778,"user_tz":-540,"elapsed":3,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"2c715f7d-05f8-4d1d-8cc5-20c617f79b94"},"source":["%%time\n","_ = vi._gradient(vi.basis, X)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 25.9 ms, sys: 7.21 ms, total: 33.1 ms\n","Wall time: 41.5 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L1dKDLqPZ_Hv","executionInfo":{"status":"ok","timestamp":1628235742032,"user_tz":-540,"elapsed":935,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"ebb26876-a57b-484d-ddef-3b098717cf9b"},"source":["%%time\n","_ = jnp.linalg.svd(X)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 535 ms, sys: 31.4 ms, total: 566 ms\n","Wall time: 672 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cJP7QryXaF3J","executionInfo":{"status":"ok","timestamp":1628235746978,"user_tz":-540,"elapsed":778,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"fb5ae432-661d-48d4-c6ef-a774c926ca60"},"source":["Y = torch.randn(2000, 1000, requires_grad=False).cuda()\n","%memit Y"],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 3286.42 MiB, increment: 0.00 MiB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IzgWZls3aKYw","executionInfo":{"status":"ok","timestamp":1628235749635,"user_tz":-540,"elapsed":5,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"08a24fe5-8bbf-48f8-d702-94af003245fd"},"source":["%%time\n","_ = torch.linalg.svd(Y)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 150 ms, sys: 0 ns, total: 150 ms\n","Wall time: 150 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bYIXcekhzZ48","executionInfo":{"status":"ok","timestamp":1628226434079,"user_tz":-540,"elapsed":2286,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"ef3d969b-63a0-465d-dbce-4f065157ad96"},"source":["%%time\n","# no jit\n","vi = VanishingIdeal()\n","%memit vi.fit(X, 0.01, method=\"vca\", backend='jax') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 1547.61 MiB, increment: 0.05 MiB\n","CPU times: user 1.63 s, sys: 220 ms, total: 1.85 s\n","Wall time: 1.91 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ayDn399L0Nrr","executionInfo":{"status":"ok","timestamp":1628227880489,"user_tz":-540,"elapsed":2100,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"049aa616-d5ee-4f85-b164-1793d569befa"},"source":["%%time\n","# jit\n","vi = VanishingIdeal()\n","%memit vi.fit(X, 0.01, method=\"vca\", backend='jax') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 1536.64 MiB, increment: 0.04 MiB\n","CPU times: user 1.46 s, sys: 183 ms, total: 1.64 s\n","Wall time: 1.73 s\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"K_9KXAaR054y"},"source":["### numpy"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8bi6M8hJz3Hv","executionInfo":{"status":"ok","timestamp":1628227902711,"user_tz":-540,"elapsed":491,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"da46b237-9629-447f-8954-52b017f4517e"},"source":["X = np.random.randn(1000, 10)\n","%memit X"],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 968.79 MiB, increment: 0.30 MiB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oC9dm4tZz0Bc","executionInfo":{"status":"ok","timestamp":1628227931790,"user_tz":-540,"elapsed":16804,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"9b151678-24b8-4eac-af66-50ea95391c2f"},"source":["%%time\n","vi = VanishingIdeal()\n","%memit vi.fit(X, 0.01, method=\"vca\", backend='numpy') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 2310.40 MiB, increment: 774.71 MiB\n","CPU times: user 27.9 s, sys: 3.23 s, total: 31.2 s\n","Wall time: 16.4 s\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3VvJTM-U0-Yt"},"source":["### torch"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1YJxdMhqz7da","executionInfo":{"status":"ok","timestamp":1628236267599,"user_tz":-540,"elapsed":1312,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"c217a485-99fa-4549-fa86-521eca989d6b"},"source":["X = torch.randn(1000,10, requires_grad=False).cuda()\n","%memit X"],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 2981.60 MiB, increment: 0.00 MiB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":506},"id":"i-olpsvI0CUH","executionInfo":{"status":"error","timestamp":1628236293214,"user_tz":-540,"elapsed":2481,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"3883ba8a-8e1a-4f34-9b50-365011f65748"},"source":["%%time\n","with torch.no_grad():\n","    vi = VanishingIdeal()\n","    vi.cuda()\n","    %memit vi.fit(X, 0.01, method=\"vca\", backend='torch') "],"execution_count":null,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-8a7aa4a6be03>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_cell_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'time'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'with torch.no_grad():\\n    vi = VanishingIdeal()\\n    vi.cuda()\\n    %memit vi.fit(X, 0.01, method=\"vca\", backend=\\'torch\\') '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mrun_cell_magic\u001b[0;34m(self, magic_name, line, cell)\u001b[0m\n\u001b[1;32m   2115\u001b[0m             \u001b[0mmagic_arg_s\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvar_expand\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstack_depth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2116\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuiltin_trap\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2117\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmagic_arg_s\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2118\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2119\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<decorator-gen-53>\u001b[0m in \u001b[0;36mtime\u001b[0;34m(self, line, cell, local_ns)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/magic.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(f, *a, **k)\u001b[0m\n\u001b[1;32m    186\u001b[0m     \u001b[0;31m# but it's overkill for just that one bit of state.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mmagic_deco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 188\u001b[0;31m         \u001b[0mcall\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    189\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/magics/execution.py\u001b[0m in \u001b[0;36mtime\u001b[0;34m(self, line, cell, local_ns)\u001b[0m\n\u001b[1;32m   1191\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1192\u001b[0m             \u001b[0mst\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclock2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1193\u001b[0;31m             \u001b[0mexec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mglob\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlocal_ns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1194\u001b[0m             \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclock2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1195\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<timed exec>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mmagic\u001b[0;34m(self, arg_s)\u001b[0m\n\u001b[1;32m   2158\u001b[0m         \u001b[0mmagic_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmagic_arg_s\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg_s\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpartition\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m' '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2159\u001b[0m         \u001b[0mmagic_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmagic_name\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprefilter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mESC_MAGIC\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2160\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_line_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmagic_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmagic_arg_s\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2161\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2162\u001b[0m     \u001b[0;31m#-------------------------------------------------------------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mrun_line_magic\u001b[0;34m(self, magic_name, line)\u001b[0m\n\u001b[1;32m   2079\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'local_ns'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getframe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstack_depth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf_locals\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2080\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuiltin_trap\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2081\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2082\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2083\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<decorator-gen-116>\u001b[0m in \u001b[0;36mmemit\u001b[0;34m(self, line, cell)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/magic.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(f, *a, **k)\u001b[0m\n\u001b[1;32m    186\u001b[0m     \u001b[0;31m# but it's overkill for just that one bit of state.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mmagic_deco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 188\u001b[0;31m         \u001b[0mcall\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    189\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/memory_profiler.py\u001b[0m in \u001b[0;36mmemit\u001b[0;34m(self, line, cell)\u001b[0m\n\u001b[1;32m   1070\u001b[0m                                \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minterval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minterval\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1071\u001b[0m                                \u001b[0mmax_usage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1072\u001b[0;31m                                include_children=include_children)\n\u001b[0m\u001b[1;32m   1073\u001b[0m             \u001b[0mmem_usage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtmp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1074\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/memory_profiler.py\u001b[0m in \u001b[0;36mmemory_usage\u001b[0;34m(proc, interval, timeout, timestamps, include_children, multiprocess, max_usage, retval, stream, backend, max_iterations)\u001b[0m\n\u001b[1;32m    334\u001b[0m             \u001b[0;31m# Therefore, the whole process hangs indefinitely. Here, we are ensuring that the process gets killed!\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    335\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 336\u001b[0;31m                 \u001b[0mreturned\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    337\u001b[0m                 \u001b[0mparent_conn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# finish timing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    338\u001b[0m                 \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparent_conn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/memory_profiler.py\u001b[0m in \u001b[0;36m_func_exec\u001b[0;34m(stmt, ns)\u001b[0m\n\u001b[1;32m    843\u001b[0m     \u001b[0;31m# helper for magic_memit, just a function proxy for the exec\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    844\u001b[0m     \u001b[0;31m# statement\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 845\u001b[0;31m     \u001b[0mexec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstmt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    846\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    847\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<string>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/content/drive/MyDrive/Colab Notebooks/mavi/mavi/vanishing_ideal.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, eps, method, max_degree, gamma, backend, **kwargs)\u001b[0m\n\u001b[1;32m     38\u001b[0m             \u001b[0mcands\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minit_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcandidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintermidiate_1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mintermidiate_t\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m             \u001b[0;31m# print('border', [c.as_expr() for c in cands.Fsymb])\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m             \u001b[0mbasist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mintermidiate_t\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconstruct_basis_t\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcands\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mintermidiate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgamma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgamma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m             \u001b[0mbasis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbasist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/drive/MyDrive/Colab Notebooks/mavi/mavi/torch/basis_construction/vca.py\u001b[0m in \u001b[0;36mconstruct_basis_t\u001b[0;34m(cands, intermidiate, eps, **kwargs)\u001b[0m\n\u001b[1;32m     48\u001b[0m     \u001b[0mCtX_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mL\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpres\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mCtX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mFX\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# orthogonal projection\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m     \u001b[0md\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mV\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmatrixfact\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mCtX_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m     \u001b[0mFtX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCtX_\u001b[0m \u001b[0;34m@\u001b[0m \u001b[0mV\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0md\u001b[0m\u001b[0;34m>\u001b[0m\u001b[0meps\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/drive/MyDrive/Colab Notebooks/mavi/mavi/torch/util/util.py\u001b[0m in \u001b[0;36mmatrixfact\u001b[0;34m(C)\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmatrixfact\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 34\u001b[0;31m     \u001b[0mV\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0md\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msvd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m \u001b[0;34m@\u001b[0m \u001b[0mC\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfull_matrices\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     35\u001b[0m     \u001b[0md\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0md\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0md\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mV\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: CUDA out of memory. Tried to allocate 232.00 MiB (GPU 0; 15.90 GiB total capacity; 557.18 MiB already allocated; 99.75 MiB free; 806.00 MiB reserved in total by PyTorch)"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"K5htmHIhcFk8","executionInfo":{"status":"error","timestamp":1628236236679,"user_tz":-540,"elapsed":8,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"1a8b7fc1-2553-4d71-f393-2c2a891e0109"},"source":["vi.device"],"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-7274eabe48b7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mvi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   1129\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mmodules\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1130\u001b[0m         raise AttributeError(\"'{}' object has no attribute '{}'\".format(\n\u001b[0;32m-> 1131\u001b[0;31m             type(self).__name__, name))\n\u001b[0m\u001b[1;32m   1132\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1133\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mUnion\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Module'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'VanishingIdeal' object has no attribute 'device'"]}]},{"cell_type":"markdown","metadata":{"id":"qH56xo0Q2jAk"},"source":["---"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v3VPQ1FvGsNv","executionInfo":{"status":"ok","timestamp":1628230575805,"user_tz":-540,"elapsed":355,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"508dd28c-f597-4042-ec0b-eb25f8db9b8d"},"source":["X = np.random.randn(1000, 10)\n","%memit X"],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 542.94 MiB, increment: 0.21 MiB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E3C0fEGJGtpA","executionInfo":{"status":"ok","timestamp":1628230595689,"user_tz":-540,"elapsed":18939,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"395eadd6-62d5-42e1-e569-1bd81698c9c9"},"source":["%%time\n","vi = VanishingIdeal()\n","%memit vi.fit(X, 0.01, method=\"vca\", backend='numpy') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 1376.54 MiB, increment: 833.46 MiB\n","CPU times: user 29.6 s, sys: 3.92 s, total: 33.5 s\n","Wall time: 18.7 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WKq2S6DiGv4N","executionInfo":{"status":"ok","timestamp":1628230657985,"user_tz":-540,"elapsed":21870,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"5fa5ff07-824b-44b8-aa8b-56fa0f1dced8"},"source":["%%time\n","vi = VanishingIdeal()\n","%memit vi.fit(X, 0.01, method=\"vca\", backend='numpy') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 1395.75 MiB, increment: 19.01 MiB\n","CPU times: user 33 s, sys: 4.77 s, total: 37.8 s\n","Wall time: 20.7 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k81vfK0M87fP","executionInfo":{"status":"ok","timestamp":1628229742523,"user_tz":-540,"elapsed":2313,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"604f17b3-633e-45b9-9254-89246533ec0f"},"source":["import tensorflow as tf\n","from tensorflow import keras\n","mnist = keras.datasets.mnist\n","(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n","\n","X = test_images.reshape(test_images.shape[0], -1) / 255.0\n","print(test_images.shape, X.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(10000, 28, 28) (10000, 784)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3nMuvi_A-nfP","executionInfo":{"status":"ok","timestamp":1628229764318,"user_tz":-540,"elapsed":21798,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"a4809ff6-eecc-4b62-ba9e-fa1f383bbb6c"},"source":["%%time \n","pre = Preprocessor(backend='jax')\n","Z = pre.fit_transform(X, th=.90, keep_dim=False)\n","print(f'top {pre.th_id-1} components has {pre.th*100} % power')\n","print(f'correpsonding range of epsilon is {pre.eps_range}')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["top 43 components has 90.0 % power\n","correpsonding range of epsilon is (44.709482642416084, 45.37765965167005) (mean: 45.04357114704307)\n","top 43 components has 90.0 % power\n","correpsonding range of epsilon is (44.709482642416084, 45.37765965167005)\n","CPU times: user 39.7 s, sys: 1.83 s, total: 41.5 s\n","Wall time: 21.8 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hG1OAoQp9pMJ","executionInfo":{"status":"ok","timestamp":1628229049607,"user_tz":-540,"elapsed":7138,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"4b73f912-1e61-48fe-b38c-20cdcbe66ff1"},"source":["%%time\n","X = device_put(X)\n","vi = VanishingIdeal()\n","%memit vi.fit(Z[:100, :], pre.eps, method=\"vca\", backend='jax', max_degree=4) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 3267.15 MiB, increment: 222.79 MiB\n","CPU times: user 1.36 s, sys: 1.42 s, total: 2.78 s\n","Wall time: 6.74 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wMHMakzv-Xmq","executionInfo":{"status":"ok","timestamp":1628229090247,"user_tz":-540,"elapsed":4664,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"9e1dbc46-4de7-4a53-ef8a-84d0de3cf182"},"source":["%%time\n","# X = device_put(X)\n","# vi = VanishingIdeal()\n","%memit vi.fit(Z[:1000, :], pre.eps, method=\"vca\", backend='jax') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 3330.10 MiB, increment: 62.66 MiB\n","CPU times: user 1.16 s, sys: 468 ms, total: 1.63 s\n","Wall time: 4.13 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3dGI9R1_BFi4","executionInfo":{"status":"ok","timestamp":1628229104924,"user_tz":-540,"elapsed":3105,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"4f8a41a2-bc4c-48db-f16f-40fb355e2dca"},"source":["%%time\n","# X = device_put(X)\n","# vi = VanishingIdeal()\n","%memit vi.fit(Z[:2000, :], pre.eps, method=\"vca\", backend='jax') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 3330.55 MiB, increment: 0.39 MiB\n","CPU times: user 914 ms, sys: 149 ms, total: 1.06 s\n","Wall time: 2.55 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eLTBY3XOBIna","executionInfo":{"status":"ok","timestamp":1628229134194,"user_tz":-540,"elapsed":1919,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"ad29c2a5-b382-44fa-8968-11aac6f8c4cd"},"source":["%%time\n","%memit vi.fit(Z, pre.eps, method=\"vca\", backend='jax') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 3330.90 MiB, increment: 0.06 MiB\n","CPU times: user 1.07 s, sys: 297 ms, total: 1.36 s\n","Wall time: 1.47 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uKVG3HEFBW9n","executionInfo":{"status":"ok","timestamp":1628229196538,"user_tz":-540,"elapsed":20977,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"7ae1ed42-1d81-4ea9-a2ff-db8822cae61a"},"source":["%%time \n","pre = Preprocessor(backend='jax')\n","Z = pre.fit_transform(X, th=.95, keep_dim=False)\n","print(f'top {pre.th_id-1} components has {pre.th*100} % power')\n","print(f'correpsonding range of epsilon is {pre.eps_range}')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["top 85 components has 95.0 % power\n","correpsonding range of epsilon is (25.450928, 25.70967)\n","CPU times: user 38 s, sys: 1.45 s, total: 39.4 s\n","Wall time: 20.9 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LyY06PL1BZg-","executionInfo":{"status":"ok","timestamp":1628229282017,"user_tz":-540,"elapsed":22894,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"1435c33e-6b22-46e2-b4ba-080308bd8545"},"source":["%%time\n","%memit vi.fit(Z, pre.eps, method=\"vca\", backend='jax') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 4098.09 MiB, increment: 0.03 MiB\n","CPU times: user 14.6 s, sys: 7.27 s, total: 21.9 s\n","Wall time: 21.9 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RsSDMSmBBPLY","executionInfo":{"status":"ok","timestamp":1628229306752,"user_tz":-540,"elapsed":23133,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"d1a783dd-8b21-49d4-f795-214708aaf761"},"source":["%%time\n","%memit vi.fit(X, pre.eps, method=\"vca\", backend='jax') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 4098.09 MiB, increment: 0.00 MiB\n","CPU times: user 14.9 s, sys: 7.4 s, total: 22.3 s\n","Wall time: 22.7 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JPcSS-Y-B4Er"},"source":["%%time\n","%memit vi.fit(X, pre.eps, method=\"vca\", backend='jax') "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2aSxDgc9B9HV","executionInfo":{"status":"ok","timestamp":1628229421692,"user_tz":-540,"elapsed":20769,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"1cc6169f-666f-4d4d-bee8-3c9ae398e0b0"},"source":["%%time \n","pre = Preprocessor(backend='jax')\n","Z = pre.fit_transform(X, th=.95, keep_dim=False)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["top 85 components has 95.0 % power\n","correpsonding range of epsilon is (25.450928, 25.70967) (mean: 25.580299377441406)\n","CPU times: user 37.8 s, sys: 1.22 s, total: 39 s\n","Wall time: 20.4 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uyiZrmxPCDqv","executionInfo":{"status":"ok","timestamp":1628230407960,"user_tz":-540,"elapsed":4497,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"cb2459bf-89af-4178-d470-d666580b264d"},"source":["%%time\n","%memit vi.fit(X, pre.eps, method=\"vca\", backend='jax') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 3330.95 MiB, increment: 32.33 MiB\n","CPU times: user 2.2 s, sys: 433 ms, total: 2.63 s\n","Wall time: 4.09 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bRdGZGmTGGxv","executionInfo":{"status":"ok","timestamp":1628230419036,"user_tz":-540,"elapsed":2189,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"9f19a080-beb6-4917-bf8a-c4a842c391d0"},"source":["%%time\n","%memit vi.fit(Z, pre.eps, method=\"vca\", backend='jax') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 3331.05 MiB, increment: 0.09 MiB\n","CPU times: user 1.28 s, sys: 264 ms, total: 1.54 s\n","Wall time: 1.8 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xyNsCvOwCVk5","executionInfo":{"status":"ok","timestamp":1628230389738,"user_tz":-540,"elapsed":2126,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"62601a43-e4ea-4d32-8751-98dd0388ca9e"},"source":["%%time\n","vi = VanishingIdeal()\n","%memit vi.fit(Z, pre.eps, method=\"grad\", backend='jax') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 3298.60 MiB, increment: 0.14 MiB\n","CPU times: user 953 ms, sys: 111 ms, total: 1.06 s\n","Wall time: 1.73 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":506},"id":"0Nz7MP41GJO2","executionInfo":{"status":"error","timestamp":1628230498523,"user_tz":-540,"elapsed":10886,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"183868a2-d7b1-4fef-8b5c-f83e89c00c60"},"source":["%%time\n","vi = VanishingIdeal()\n","%memit vi.fit(X, pre.eps, method=\"grad\", backend='jax') "],"execution_count":null,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-693f44b70f01>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_cell_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'time'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'vi = VanishingIdeal()\\n%memit vi.fit(X, pre.eps, method=\"grad\", backend=\\'jax\\') '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mrun_cell_magic\u001b[0;34m(self, magic_name, line, cell)\u001b[0m\n\u001b[1;32m   2115\u001b[0m             \u001b[0mmagic_arg_s\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvar_expand\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstack_depth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2116\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuiltin_trap\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2117\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmagic_arg_s\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2118\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2119\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<decorator-gen-53>\u001b[0m in \u001b[0;36mtime\u001b[0;34m(self, line, cell, local_ns)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/magic.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(f, *a, **k)\u001b[0m\n\u001b[1;32m    186\u001b[0m     \u001b[0;31m# but it's overkill for just that one bit of state.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mmagic_deco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 188\u001b[0;31m         \u001b[0mcall\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    189\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/magics/execution.py\u001b[0m in \u001b[0;36mtime\u001b[0;34m(self, line, cell, local_ns)\u001b[0m\n\u001b[1;32m   1191\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1192\u001b[0m             \u001b[0mst\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclock2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1193\u001b[0;31m             \u001b[0mexec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mglob\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlocal_ns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1194\u001b[0m             \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclock2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1195\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<timed exec>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mmagic\u001b[0;34m(self, arg_s)\u001b[0m\n\u001b[1;32m   2158\u001b[0m         \u001b[0mmagic_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmagic_arg_s\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg_s\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpartition\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m' '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2159\u001b[0m         \u001b[0mmagic_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmagic_name\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprefilter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mESC_MAGIC\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2160\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_line_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmagic_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmagic_arg_s\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2161\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2162\u001b[0m     \u001b[0;31m#-------------------------------------------------------------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mrun_line_magic\u001b[0;34m(self, magic_name, line)\u001b[0m\n\u001b[1;32m   2079\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'local_ns'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getframe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstack_depth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf_locals\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2080\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuiltin_trap\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2081\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2082\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2083\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<decorator-gen-116>\u001b[0m in \u001b[0;36mmemit\u001b[0;34m(self, line, cell)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/magic.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(f, *a, **k)\u001b[0m\n\u001b[1;32m    186\u001b[0m     \u001b[0;31m# but it's overkill for just that one bit of state.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mmagic_deco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 188\u001b[0;31m         \u001b[0mcall\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    189\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/memory_profiler.py\u001b[0m in \u001b[0;36mmemit\u001b[0;34m(self, line, cell)\u001b[0m\n\u001b[1;32m   1070\u001b[0m                                \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minterval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minterval\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1071\u001b[0m                                \u001b[0mmax_usage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1072\u001b[0;31m                                include_children=include_children)\n\u001b[0m\u001b[1;32m   1073\u001b[0m             \u001b[0mmem_usage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtmp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1074\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/memory_profiler.py\u001b[0m in \u001b[0;36mmemory_usage\u001b[0;34m(proc, interval, timeout, timestamps, include_children, multiprocess, max_usage, retval, stream, backend, max_iterations)\u001b[0m\n\u001b[1;32m    334\u001b[0m             \u001b[0;31m# Therefore, the whole process hangs indefinitely. Here, we are ensuring that the process gets killed!\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    335\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 336\u001b[0;31m                 \u001b[0mreturned\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    337\u001b[0m                 \u001b[0mparent_conn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# finish timing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    338\u001b[0m                 \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparent_conn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/memory_profiler.py\u001b[0m in \u001b[0;36m_func_exec\u001b[0;34m(stmt, ns)\u001b[0m\n\u001b[1;32m    843\u001b[0m     \u001b[0;31m# helper for magic_memit, just a function proxy for the exec\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    844\u001b[0m     \u001b[0;31m# statement\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 845\u001b[0;31m     \u001b[0mexec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstmt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    846\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    847\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<string>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/content/drive/MyDrive/Colab Notebooks/mavi/mavi/vanishing_ideal.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, eps, method, max_degree, gamma, backend, **kwargs)\u001b[0m\n\u001b[1;32m     34\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mt\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax_degree\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m             \u001b[0;31m# print(\"\\ndegree %d\" % t)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 36\u001b[0;31m             \u001b[0mcands\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minit_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcandidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintermidiate_1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mintermidiate_t\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     37\u001b[0m             \u001b[0;31m# print('border', [c.as_expr() for c in cands.Fsymb])\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m             \u001b[0mbasist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mintermidiate_t\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconstruct_basis_t\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcands\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mintermidiate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgamma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgamma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/drive/MyDrive/Colab Notebooks/mavi/mavi/jax/basis_construction/grad.py\u001b[0m in \u001b[0;36minit_candidates\u001b[0;34m(X, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0minit_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m     \u001b[0mnpoints\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mndims\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m     \u001b[0mdX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0midentity\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mndims\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnpoints\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mIntermidiate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/_src/numpy/lax_numpy.py\u001b[0m in \u001b[0;36mtile\u001b[0;34m(A, reps)\u001b[0m\n\u001b[1;32m   2846\u001b[0m   \u001b[0mreps\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA_shape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreps\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mreps\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2847\u001b[0m   result = broadcast_to(reshape(A, [j for i in A_shape for j in [1, i]]),\n\u001b[0;32m-> 2848\u001b[0;31m                         [k for pair in zip(reps, A_shape) for k in pair])\n\u001b[0m\u001b[1;32m   2849\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmultiply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA_shape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreps\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2850\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/_src/numpy/lax_numpy.py\u001b[0m in \u001b[0;36mbroadcast_to\u001b[0;34m(arr, shape)\u001b[0m\n\u001b[1;32m   1837\u001b[0m     \u001b[0mnew_dims\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnlead\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnlead\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mdiff\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1838\u001b[0m     \u001b[0mkept_dims\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_dims\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1839\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mlax\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbroadcast_in_dim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdiff\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkept_dims\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1840\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1841\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/_src/lax/lax.py\u001b[0m in \u001b[0;36mbroadcast_in_dim\u001b[0;34m(operand, shape, broadcast_dimensions)\u001b[0m\n\u001b[1;32m    733\u001b[0m   return broadcast_in_dim_p.bind(\n\u001b[1;32m    734\u001b[0m       \u001b[0moperand\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 735\u001b[0;31m       broadcast_dimensions=tuple(broadcast_dimensions))\n\u001b[0m\u001b[1;32m    736\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    737\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mbroadcast_to_rank\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mArray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrank\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mArray\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/core.py\u001b[0m in \u001b[0;36mbind\u001b[0;34m(self, *args, **params)\u001b[0m\n\u001b[1;32m    262\u001b[0m         args, used_axis_names(self, params) if self._dispatch_on_params else None)\n\u001b[1;32m    263\u001b[0m     \u001b[0mtracers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtop_trace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfull_raise\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 264\u001b[0;31m     \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtop_trace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprocess_primitive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtracers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    265\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfull_lower\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmultiple_results\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mfull_lower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    266\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/core.py\u001b[0m in \u001b[0;36mprocess_primitive\u001b[0;34m(self, primitive, tracers, params)\u001b[0m\n\u001b[1;32m    601\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    602\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mprocess_primitive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprimitive\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtracers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 603\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mprimitive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimpl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mtracers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    604\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    605\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mprocess_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprimitive\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtracers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/interpreters/xla.py\u001b[0m in \u001b[0;36mapply_primitive\u001b[0;34m(prim, *args, **params)\u001b[0m\n\u001b[1;32m    247\u001b[0m   \u001b[0;34m\"\"\"Impl rule that compiles and runs a single primitive 'prim' using XLA.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    248\u001b[0m   \u001b[0mcompiled_fun\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxla_primitive_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0munsafe_map\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg_spec\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 249\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mcompiled_fun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    251\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/interpreters/xla.py\u001b[0m in \u001b[0;36m_execute_compiled_primitive\u001b[0;34m(prim, compiled, result_handler, *args)\u001b[0m\n\u001b[1;32m    363\u001b[0m   \u001b[0mdevice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompiled\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlocal_devices\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    364\u001b[0m   \u001b[0minput_bufs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice_put\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0margs\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mtoken\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 365\u001b[0;31m   \u001b[0mout_bufs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompiled\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_bufs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    366\u001b[0m   \u001b[0mcheck_special\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout_bufs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    367\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mresult_handler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mout_bufs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: Resource exhausted: Out of memory while trying to allocate 24586240000 bytes."]}]},{"cell_type":"code","metadata":{"id":"mNEAyyBrDxwb"},"source":["%%time\n","vi = VanishingIdeal()\n","%memit vi.fit(X, pre.eps, method=\"grad\", backend='numpy') "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KL_6hN04GexS"},"source":["%%time\n","vi = VanishingIdeal()\n","%memit vi.fit(X, pre.eps, method=\"grad\", backend='numpy') "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MEA_knk3D3eP"},"source":["A = jax.random.normal(key, (100, 10))\n","M = A @ A.T\n","_ = eigh(M)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"cQfCoYNtEKN2","executionInfo":{"status":"error","timestamp":1628229910678,"user_tz":-540,"elapsed":349,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"c2ff94c1-bb83-47b5-9f52-f2e99206453f"},"source":["_ = eigh(M, b=M)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NotImplementedError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNotImplementedError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-7a9cb23365bf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0meigh\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mM\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mM\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/_src/scipy/linalg.py\u001b[0m in \u001b[0;36meigh\u001b[0;34m(***failed resolving arguments***)\u001b[0m\n\u001b[1;32m     80\u001b[0m   \u001b[0;32mdel\u001b[0m \u001b[0moverwrite_a\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moverwrite_b\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mturbo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_finite\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mb\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 82\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Only the b=None case of eigh is implemented\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     83\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mtype\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m     \u001b[0;32mraise\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Only the type=1 case of eigh is implemented.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNotImplementedError\u001b[0m: Only the b=None case of eigh is implemented"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rbT9D97Y2emE","executionInfo":{"status":"ok","timestamp":1628226743765,"user_tz":-540,"elapsed":1,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"f5a5f47f-f607-4819-9638-fbe71ecd03ec"},"source":["%%time\n","# jit\n","vi = VanishingIdeal()\n","%memit vi.fit(X, 0.01, method=\"vca\", backend='jax') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 1548.74 MiB, increment: 0.00 MiB\n","CPU times: user 101 ms, sys: 127 ms, total: 229 ms\n","Wall time: 393 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uZ3GFVmS1HWk","executionInfo":{"status":"ok","timestamp":1628226051751,"user_tz":-540,"elapsed":350,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"77ef3ff6-763f-4b28-e91f-b87bd5d982a5"},"source":["import sys\n","getsize(X)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["200"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"wj1NnByn1aX-"},"source":["import sys\n","from numbers import Number\n","from collections import deque\n","from collections.abc import Set, Mapping\n","\n","\n","ZERO_DEPTH_BASES = (str, bytes, Number, range, bytearray)\n","\n","\n","def getsize(obj_0):\n","    \"\"\"Recursively iterate to sum size of object & members.\"\"\"\n","    _seen_ids = set()\n","    def inner(obj):\n","        obj_id = id(obj)\n","        if obj_id in _seen_ids:\n","            return 0\n","        _seen_ids.add(obj_id)\n","        size = sys.getsizeof(obj)\n","        if isinstance(obj, ZERO_DEPTH_BASES):\n","            pass # bypass remaining control flow and return\n","        elif isinstance(obj, (tuple, list, Set, deque)):\n","            size += sum(inner(i) for i in obj)\n","        elif isinstance(obj, Mapping) or hasattr(obj, 'items'):\n","            size += sum(inner(k) + inner(v) for k, v in getattr(obj, 'items')())\n","        # Check for custom object instances - may subclass above too\n","        if hasattr(obj, '__dict__'):\n","            size += inner(vars(obj))\n","        if hasattr(obj, '__slots__'): # can have __slots__ with __dict__\n","            size += sum(inner(getattr(obj, s)) for s in obj.__slots__ if hasattr(obj, s))\n","        return size\n","    return inner(obj_0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"S-CGK5Ce1kpg"},"source":["theta = [jnp.pi*i/3 for i in range(6)]\n","X = jnp.vstack((np.cos(theta), np.sin(theta))).T\n","# plt.plot(X[:,0], X[:,1], \"o\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nRL3qATk1pMa"},"source":["vi = VanishingIdeal()\n","vi.fit(X, 0.01, method=\"vca\", backend='jax') \n","output = vi.evaluate(X)\n","# print(X.device, vi.device, output.device)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UyzWmxl55lC_","executionInfo":{"status":"ok","timestamp":1628143254901,"user_tz":-540,"elapsed":350,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"b777227a-32b5-43e6-d05c-917963e9f926"},"source":["print(jnp.ones(3).device_buffer.device())  "],"execution_count":null,"outputs":[{"output_type":"stream","text":["gpu:0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RO8cmW-C5_B2","executionInfo":{"status":"ok","timestamp":1628143352905,"user_tz":-540,"elapsed":892,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"f4bc66f3-b4d9-41e8-9709-6b73cdccfec3"},"source":["from jax.lib import xla_bridge\n","print(xla_bridge.get_backend().platform)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["gpu\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7Tg5Ay245u_N","executionInfo":{"status":"ok","timestamp":1628143309854,"user_tz":-540,"elapsed":1065,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"9543d463-20d1-4497-c414-8d6952829c53"},"source":["a = jnp.ones(3)\n","a.device()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GpuDevice(id=0, process_index=0)"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3StTaDRr4ntL","executionInfo":{"status":"ok","timestamp":1628143264935,"user_tz":-540,"elapsed":367,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"d9dbc871-d30c-45fe-ea2f-394cbb330499"},"source":["X.device_buffer.device()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GpuDevice(id=0, process_index=0)"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rVFnADzo5wny","executionInfo":{"status":"ok","timestamp":1628143293763,"user_tz":-540,"elapsed":392,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"89b185b8-845e-41e6-c7f6-b3fc34f0247d"},"source":["X"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DeviceArray([[ 1.0000000e+00,  0.0000000e+00],\n","             [ 5.0000000e-01,  8.6602539e-01],\n","             [-5.0000000e-01,  8.6602539e-01],\n","             [-1.0000000e+00,  1.2246469e-16],\n","             [-5.0000000e-01, -8.6602539e-01],\n","             [ 5.0000000e-01, -8.6602539e-01]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"Gu-tELT1wp6X"},"source":["from torchvision.datasets import MNIST\n","from torchvision import transforms \n","from torch.utils.data import DataLoader"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oj67Lx_Q4Scu"},"source":["import jax\n","from jax import device_put\n","key = jax.random.PRNGKey(0)\n","X = device_put(jax.random.normal(key, (1000, 10)))\n","X = device_put(X)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i3X3IWK44Y7x","executionInfo":{"status":"ok","timestamp":1628223977822,"user_tz":-540,"elapsed":1985,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"a48480df-1084-4022-94f4-d203d72c5e76"},"source":["%%time\n","# no jit\n","vi = VanishingIdeal()\n","vi.fit(X, 0.01, method=\"vca\", backend='jax') \n","output = vi.evaluate(X)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 1.47 s, sys: 176 ms, total: 1.65 s\n","Wall time: 1.6 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T9iyDNAMsTiv","executionInfo":{"status":"ok","timestamp":1628225249488,"user_tz":-540,"elapsed":2272,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"f7996cfb-4e1f-4b8c-e8a5-3879bcb12175"},"source":["%%time\n","# with jit\n","vi = VanishingIdeal()\n","%memit vi.fit(X, 0.01, method=\"vca\", backend='jax') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 4327.20 MiB, increment: 0.01 MiB\n","CPU times: user 1.54 s, sys: 233 ms, total: 1.78 s\n","Wall time: 1.88 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Z9UXOSq_xV-k"},"source":["X = np.random.randn(1000, 10)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"45CGSZUwt0xn","executionInfo":{"status":"ok","timestamp":1628225013106,"user_tz":-540,"elapsed":17573,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"93b69201-3c1b-4956-8edb-5c07c53a20ea"},"source":["%%time\n","vi = VanishingIdeal()\n","%memit vi.fit(X, 0.01, method=\"vca\", backend='numpy') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 4326.74 MiB, increment: 1.05 MiB\n","CPU times: user 28.3 s, sys: 3.91 s, total: 32.2 s\n","Wall time: 17.2 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5i_LYYcSx5yO"},"source":["Y = torch.randn(1000,10).cuda()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"81HqHliet8qY","executionInfo":{"status":"ok","timestamp":1628225170141,"user_tz":-540,"elapsed":17300,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"4ee284c0-fc08-47a6-bedb-8d3710b2fd63"},"source":["%%time\n","vi = VanishingIdeal()\n","%memit vi.fit(Y, 0.01, method=\"vca\", backend='torch') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 4326.92 MiB, increment: 0.02 MiB\n","CPU times: user 14.8 s, sys: 1.91 s, total: 16.7 s\n","Wall time: 16.8 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oElQj71RvQ6o"},"source":["!pip install memory_profiler\n","%load_ext memory_profiler\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hC7kV6VGud8w","executionInfo":{"status":"ok","timestamp":1628224846426,"user_tz":-540,"elapsed":2721,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"a1829766-47c4-4b9c-b4ba-73c8f527ed9b"},"source":[""],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: memory_profiler in /usr/local/lib/python3.7/dist-packages (0.58.0)\n","Requirement already satisfied: psutil in /usr/local/lib/python3.7/dist-packages (from memory_profiler) (5.4.8)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EWnaNsoUsqvm"},"source":["%%time\n","vi = VanishingIdeal()\n","vi.fit(X, 0.01, method=\"vca\", backend='jax') "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"N2lx56Nsse9G"},"source":["from torchvision.datasets import MNIST\n","from torchvision import transforms \n","from torch.utils.data import DataLoader"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i2tmCuIFRKFc","executionInfo":{"status":"ok","timestamp":1628150676822,"user_tz":-540,"elapsed":586,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"24a8e4df-811d-4405-c193-c677f342bb43"},"source":["%%time\n","output = vi.evaluate(X)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 363 µs, sys: 0 ns, total: 363 µs\n","Wall time: 380 µs\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ezJ-iCI5RbHY"},"source":["X_ = jnp.repeat(X, 1000, axis=0)\n","X_ = device_put(X_)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PMQdKO8nRcSx","executionInfo":{"status":"ok","timestamp":1628149521408,"user_tz":-540,"elapsed":861,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"62adcb3f-f42a-4d7f-a23a-bb3c78168eaa"},"source":["%time vi.evaluate(X_)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 129 ms, sys: 0 ns, total: 129 ms\n","Wall time: 105 ms\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["DeviceArray([[ 4.1148418e-09, -2.9680901e-25, -9.5227302e-34, ...,\n","               8.1873448e-34,  3.6594173e-17, -1.4901161e-08],\n","             [ 4.1148418e-09, -2.9680901e-25, -9.5227302e-34, ...,\n","               8.1873448e-34,  3.6594173e-17, -1.4901161e-08],\n","             [ 4.1148418e-09, -2.9680901e-25, -9.5227302e-34, ...,\n","               8.1873448e-34,  3.6594173e-17, -1.4901161e-08],\n","             ...,\n","             [ 0.0000000e+00, -2.9283216e-09, -7.4505806e-09, ...,\n","              -1.4901161e-08,  6.9534622e-18,  0.0000000e+00],\n","             [ 0.0000000e+00, -2.9283216e-09, -7.4505806e-09, ...,\n","              -1.4901161e-08,  6.9534622e-18,  0.0000000e+00],\n","             [ 0.0000000e+00, -2.9283216e-09, -7.4505806e-09, ...,\n","              -1.4901161e-08,  6.9534622e-18,  0.0000000e+00]],            dtype=float32)"]},"metadata":{"tags":[]},"execution_count":204}]},{"cell_type":"code","metadata":{"id":"CoLIgSiR8V7l"},"source":["grad_f = jax.vmap(jax.grad(vi.evaluate))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cgT-FWy199X7"},"source":["f = lambda x, y: vi.evaluate(jax.array([[x,y]]))\n","grad_f = jax.grad(f)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"l8K2bL3iRZ4R"},"source":["X_ = jnp.repeat(X, 1000, axis=0)\n","X_ = device_put(X_)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"psGqwhTN-0KL","executionInfo":{"status":"ok","timestamp":1628145002044,"user_tz":-540,"elapsed":362,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"38a761d3-27df-4f5f-f74d-646e80c5a082"},"source":["jac_f = jax.jacobian(lambda x: vi.evaluate(x, ))\n","dGXj = jac_f(X)\n","dGXj.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(6, 7, 6, 2)"]},"metadata":{"tags":[]},"execution_count":81}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A3n18zQW_DNT","executionInfo":{"status":"ok","timestamp":1628144955460,"user_tz":-540,"elapsed":813,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"bbfc08ae-1b79-4a25-f254-5189a1691d9d"},"source":["dGX= vi.gradient(X)\n","dGX.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(12, 7)"]},"metadata":{"tags":[]},"execution_count":77}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WVOs01YDAUk8","executionInfo":{"status":"ok","timestamp":1628145139476,"user_tz":-540,"elapsed":348,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"385079b2-e757-4ea1-b345-566fe61a66af"},"source":["dGXj_ = dGXj.sum(axis=0).reshape(7,-1).T\n","dGXj_.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(12, 7)"]},"metadata":{"tags":[]},"execution_count":91}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1KqThp4eCRSN","executionInfo":{"status":"ok","timestamp":1628145560064,"user_tz":-540,"elapsed":1585,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"83f02597-a933-42d0-8c18-c3e9a6912c58"},"source":["eov(X[0])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DeviceArray([-3.6225122e-34,  0.0000000e+00,  1.4901161e-08,\n","              7.4505806e-09, -1.4901161e-08,  3.6594179e-17,\n","             -2.9802322e-08], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":113}]},{"cell_type":"code","metadata":{"id":"NnJ9xo-zCok6"},"source":["Z = np.array(X)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"afZ9cnJ0Cwud","executionInfo":{"status":"ok","timestamp":1628145732869,"user_tz":-540,"elapsed":2,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"89491e6c-b279-4d97-dcd4-479b029652e5"},"source":["%%time\n","vi_n = VanishingIdeal()\n","vi_n.fit(np.array(Z), 0.01, method=\"vca\", backend='numpy') \n","output = vi.evaluate(Z)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 22.5 ms, sys: 3.45 ms, total: 25.9 ms\n","Wall time: 20.2 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_IRpMmznDsTZ"},"source":["Z_ = np.repeat(Z, 1000, axis=0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n6bRIrE2C7sT","executionInfo":{"status":"ok","timestamp":1628146345664,"user_tz":-540,"elapsed":800,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"393fe4f5-5587-4d1a-e772-666d4c37b5e1"},"source":["%time vi.evaluate(Z_)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 23.3 ms, sys: 2.81 ms, total: 26.1 ms\n","Wall time: 19.7 ms\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["DeviceArray([[ 4.1148418e-09, -2.9680901e-25, -9.5227302e-34, ...,\n","               8.1873448e-34,  3.6594173e-17, -1.4901161e-08],\n","             [ 4.1148418e-09, -2.9680901e-25, -9.5227302e-34, ...,\n","               8.1873448e-34,  3.6594173e-17, -1.4901161e-08],\n","             [ 4.1148418e-09, -2.9680901e-25, -9.5227302e-34, ...,\n","               8.1873448e-34,  3.6594173e-17, -1.4901161e-08],\n","             ...,\n","             [ 0.0000000e+00, -2.9283216e-09, -7.4505806e-09, ...,\n","              -1.4901161e-08,  6.9534622e-18,  0.0000000e+00],\n","             [ 0.0000000e+00, -2.9283216e-09, -7.4505806e-09, ...,\n","              -1.4901161e-08,  6.9534622e-18,  0.0000000e+00],\n","             [ 0.0000000e+00, -2.9283216e-09, -7.4505806e-09, ...,\n","              -1.4901161e-08,  6.9534622e-18,  0.0000000e+00]],            dtype=float32)"]},"metadata":{"tags":[]},"execution_count":164}]},{"cell_type":"code","metadata":{"id":"FUqx8dPaDJRE"},"source":["X_ = jnp.repeat(X, 1000, axis=0)\n","X_ = device_put(X_)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9D5ybYKaD_jo"},"source":["eov_lit = jax.jit(eov)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EbZAvgQ8E6XE"},"source":["key = jax.random.PRNGKey(0)\n","Y = jax.random.normal(key, X_.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T35ALndBMz2V","executionInfo":{"status":"ok","timestamp":1628148297434,"user_tz":-540,"elapsed":775,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"b6d98f4a-58ad-4634-8615-327b1fd02f07"},"source":["jax.vmap(eov_lit)(Y[0:1])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DeviceArray([[ 0.22402723,  0.        ,  0.04373399,  0.00655932,\n","               0.02304796, -0.0078308 , -0.00797659]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":167}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PXrQ46_VCbko","executionInfo":{"status":"ok","timestamp":1628149548156,"user_tz":-540,"elapsed":342,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"710390de-a583-4833-fb80-d9b32aecb621"},"source":["%time jax.vmap(eov_lit)(Y).block_until_ready();"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 1.26 ms, sys: 0 ns, total: 1.26 ms\n","Wall time: 1.17 ms\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["DeviceArray([[ 2.2402723e-01, -2.3063393e-10,  4.3733995e-02, ...,\n","               2.3047959e-02, -7.8308042e-03, -7.9765897e-03],\n","             [-1.8556082e+00, -6.2039076e-09,  4.8817053e+00, ...,\n","               2.8016582e+00, -4.0639501e+00, -1.7120161e+00],\n","             [-7.7281898e-01, -2.3288749e-09,  1.1900860e+00, ...,\n","              -1.6758124e+00,  1.3339086e+00, -1.9025142e+00],\n","             ...,\n","             [-5.8551824e-01,  1.6570372e-09,  1.0025380e+00, ...,\n","               5.0657725e-01, -7.5664485e-01, -6.9471335e-01],\n","             [ 3.9456300e-02, -7.8354212e-10,  6.5997086e-02, ...,\n","              -2.8061159e-02, -1.1037571e-01,  7.8691877e-02],\n","             [ 1.4549695e-01, -1.0725203e-09,  5.5619422e-03, ...,\n","              -6.8495944e-02,  7.9609141e-02,  3.9961986e-02]],            dtype=float32)"]},"metadata":{"tags":[]},"execution_count":205}]},{"cell_type":"code","metadata":{"id":"8r87nxQ5CJWD"},"source":["eov = lambda x: _evaluate_v(vi.basis, x)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"03gjK-nTAxvO"},"source":["from mavi.jax.util.util import blow, dblow\n","def _evaluate_v(B, X_):\n","    F = B.nonvanishings()\n","    G = B.vanishings()\n","    # if jnp.all(jnp.asarray([gt.size==0 for gt in G])):\n","    #     return jnp.array([])\n","\n","    X = X_.reshape(1, -1)\n","    N = X.shape[0]\n","\n","    ZF0 = jnp.ones((N, 1)) * F[0]\n","    ZF1 = jnp.hstack([ZF0, X]) @ F[1]\n","    Z1 = jnp.hstack([ZF0, X]) @ G[1]\n","\n","    ZF = jnp.hstack([ZF0, ZF1])\n","    Z = jnp.array(Z1)\n","    # print([f.shape for f in F[1:]])\n","    ZFt = jnp.array(ZF1)\n","    for t in range(2, len(F)):\n","        C = blow(ZF1, ZFt)\n","        Zt = jnp.hstack([ZF, C]) @ (G[t])\n","        ZFt = jnp.hstack([ZF, C]) @ (F[t])\n","        ZF = jnp.hstack([ZF, ZFt])\n","        Z = jnp.hstack([Z, Zt])\n","\n","    return Z.flatten()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0CB6JY3JA6uk","executionInfo":{"status":"ok","timestamp":1628145186494,"user_tz":-540,"elapsed":469,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"f569f6e0-8ff9-4616-9a86-0fee086b7f25"},"source":["dGX[1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DeviceArray([-4.7140449e-01, -2.9680901e-25, -3.3251119e-01,\n","             -1.7300174e-01,  2.8588268e-01,  2.5327523e-17,\n","             -4.7140464e-01], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":98}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4D5PU1HWBG8y","executionInfo":{"status":"ok","timestamp":1628145234182,"user_tz":-540,"elapsed":468,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"68ad367a-22ab-4883-ea9c-b5adb760806e"},"source":["dGXj_ = dGXj.sum(axis=2)\n","dGXj_.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(6, 7, 2)"]},"metadata":{"tags":[]},"execution_count":101}]},{"cell_type":"code","metadata":{"id":"S4Kde_CQBN41"},"source":["dGXj__ = dGXj_.transpose(0,2,1).reshape(-1,7)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hnh_OWSyBalZ","executionInfo":{"status":"ok","timestamp":1628145305801,"user_tz":-540,"elapsed":562,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"81eaa87a-8f1a-41a4-b169-1a74fec7627f"},"source":["dGXj__[1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DeviceArray([ 2.0719888e-17,  0.0000000e+00,  1.8145677e-01,\n","             -6.5740961e-01, -1.8677804e-01, -7.0710677e-01,\n","             -6.3787166e-16], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":106}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9jNh_imC_bCY","executionInfo":{"status":"ok","timestamp":1628144847523,"user_tz":-540,"elapsed":796,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"f75c6f88-0833-4509-de05-27ceeef73d17"},"source":["A = jax.numpy.array([[2,3.0], [1, 2]])\n","A.shape[0]//A.shape[1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":74}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":606},"id":"lpBsdogB8hkn","executionInfo":{"status":"error","timestamp":1628144467470,"user_tz":-540,"elapsed":819,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"9c81ba4d-b767-4688-8a37-049293fde6b9"},"source":["jax.vmap(grad_f(1,2))"],"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mUnfilteredStackTrace\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m<ipython-input-64-fd6a32564406>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mjax\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrad_f\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/_src/traceback_util.py\u001b[0m in \u001b[0;36mreraise_with_filtered_traceback\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    182\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 183\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    184\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/_src/api.py\u001b[0m in \u001b[0;36mgrad_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    828\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mgrad_f\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 829\u001b[0;31m     \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalue_and_grad_f\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    830\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/_src/traceback_util.py\u001b[0m in \u001b[0;36mreraise_with_filtered_traceback\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    182\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 183\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    184\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/_src/api.py\u001b[0m in \u001b[0;36mvalue_and_grad_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    898\u001b[0m     \u001b[0mf_partial\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdyn_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margnums_partial\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margnums\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 899\u001b[0;31m     \u001b[0mtree_map\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpartial\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_check_input_dtype_grad\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mholomorphic\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_int\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdyn_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    900\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_aux\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/_src/tree_util.py\u001b[0m in \u001b[0;36mtree_map\u001b[0;34m(f, tree, is_leaf, *rest)\u001b[0m\n\u001b[1;32m    167\u001b[0m   \u001b[0mall_leaves\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mleaves\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtreedef\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflatten_up_to\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mr\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrest\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 168\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mtreedef\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munflatten\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mxs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mxs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mall_leaves\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    169\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/_src/tree_util.py\u001b[0m in \u001b[0;36m<genexpr>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    167\u001b[0m   \u001b[0mall_leaves\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mleaves\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtreedef\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflatten_up_to\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mr\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrest\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 168\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mtreedef\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munflatten\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mxs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mxs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mall_leaves\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    169\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/_src/api.py\u001b[0m in \u001b[0;36m_check_input_dtype_revderiv\u001b[0;34m(name, holomorphic, allow_int, x)\u001b[0m\n\u001b[1;32m    938\u001b[0m                               dtypes.issubdtype(aval.dtype, np.complexfloating)):\n\u001b[0;32m--> 939\u001b[0;31m     raise TypeError(f\"{name} requires real- or complex-valued inputs (input dtype that \"\n\u001b[0m\u001b[1;32m    940\u001b[0m                     \u001b[0;34m\"is a sub-dtype of np.floating or np.complexfloating), \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mUnfilteredStackTrace\u001b[0m: TypeError: grad requires real- or complex-valued inputs (input dtype that is a sub-dtype of np.floating or np.complexfloating), but got int32. If you want to use integer-valued inputs, use vjp or set allow_int to True.\n\nThe stack trace below excludes JAX-internal frames.\nThe preceding is the original exception that occurred, unmodified.\n\n--------------------","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-64-fd6a32564406>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mjax\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrad_f\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jax/_src/api.py\u001b[0m in \u001b[0;36m_check_input_dtype_revderiv\u001b[0;34m(name, holomorphic, allow_int, x)\u001b[0m\n\u001b[1;32m    937\u001b[0m   elif not allow_int and not (dtypes.issubdtype(aval.dtype, np.floating) or\n\u001b[1;32m    938\u001b[0m                               dtypes.issubdtype(aval.dtype, np.complexfloating)):\n\u001b[0;32m--> 939\u001b[0;31m     raise TypeError(f\"{name} requires real- or complex-valued inputs (input dtype that \"\n\u001b[0m\u001b[1;32m    940\u001b[0m                     \u001b[0;34m\"is a sub-dtype of np.floating or np.complexfloating), \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    941\u001b[0m                     \u001b[0;34mf\"but got {aval.dtype.name}. If you want to use integer-valued \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: grad requires real- or complex-valued inputs (input dtype that is a sub-dtype of np.floating or np.complexfloating), but got int32. If you want to use integer-valued inputs, use vjp or set allow_int to True."]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sOyf-Y3L6bi1","executionInfo":{"status":"ok","timestamp":1628143478544,"user_tz":-540,"elapsed":795,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"753edf40-425d-4bb1-c015-b870b7ceff0d"},"source":["%%time\n","vi = VanishingIdeal()\n","vi.fit(X, 0.01, method=\"vca\", backend='numpy') \n","output = vi.evaluate(X)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 5.76 ms, sys: 0 ns, total: 5.76 ms\n","Wall time: 4.77 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J_JCbple6I_p","executionInfo":{"status":"ok","timestamp":1628143393070,"user_tz":-540,"elapsed":802,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"079221ad-27aa-4199-8173-97381bb4b797"},"source":["%%time\n","vi = VanishingIdeal()\n","vi.fit(X, 0.01, method=\"vca\", backend='jax') \n","output = vi.evaluate(X)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 29.9 ms, sys: 2.11 ms, total: 32 ms\n","Wall time: 24.3 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AeJvJ_EJ6LMq","executionInfo":{"status":"ok","timestamp":1628143404319,"user_tz":-540,"elapsed":342,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"60ff7fc6-2ab7-4b33-a9b0-588c903528e8"},"source":["%%time\n","vi = VanishingIdeal()\n","vi.fit(X, 0.01, method=\"vca\", backend='jax') \n","output = vi.evaluate(X)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 30.8 ms, sys: 3.83 ms, total: 34.7 ms\n","Wall time: 25.9 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RLjDdOZ84b34","executionInfo":{"status":"ok","timestamp":1628146845135,"user_tz":-540,"elapsed":2260,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"8f66d8c4-0086-45ec-9d3e-f9857f91bb75"},"source":["import time\n","import jax\n","import jax.numpy as jnp\n","import numpy as np\n","\n","size = 3000\n","\n","key = jax.random.PRNGKey(0)\n","x = jax.random.normal(key, (size, size), dtype=jnp.float64)\n","\n","start = time.time()\n","test = jnp.dot(x, x.T).block_until_ready()\n","print(\"Time of jnp: {:0.4f} s\".format(time.time() - start))\n","\n","x2 = np.random.normal(size=(size, size)).astype(np.float64)\n","\n","start = time.time()\n","test2 = np.dot(x2, x2.T)\n","print(\"Time of np: {:0.4f} s\".format(time.time() - start))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Time of jnp: 0.2430 s\n","Time of np: 0.7377 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_CH-336yxGhP"},"source":["transform = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.1307,), (0.3081,))\n","])\n","mnist_test = MNIST('.', train=False, download=True, transform=transform)\n","dataloader = DataLoader(mnist_test, batch_size=100)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PKaBaVYa3X7C"},"source":["transform = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.1307,), (0.3081,))\n","])\n","mnist_test = MNIST('.', train=False, download=True, transform=transform)\n","dataloader = DataLoader(mnist_test, batch_size=100)\n","\n","dataiter = iter(dataloader)\n","images, labels = dataiter.next()  # ミニバッチを一つ取り出す"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IxiDxCnwxZ6D","executionInfo":{"status":"ok","timestamp":1628092479157,"user_tz":-540,"elapsed":3487,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"de09ad36-2d00-4883-9799-898cf5467699"},"source":["%%time\n","# 100 samples\n","vi = VanishingIdeal()\n","vi.fit(images.view(-1, 28*28), 20.0, method=\"grad\", backend='torch', max_degree=5) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 3.08 s, sys: 23 ms, total: 3.1 s\n","Wall time: 3.09 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CbWzu48J4Bap","executionInfo":{"status":"ok","timestamp":1628092513171,"user_tz":-540,"elapsed":6675,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"4f84a32a-1179-4a1d-8f43-b9d6daa64966"},"source":["%%time\n","# 200 samples\n","vi = VanishingIdeal()\n","vi.fit(images.view(-1, 28*28), 20.0, method=\"grad\", backend='torch', max_degree=5) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 6.02 s, sys: 408 ms, total: 6.42 s\n","Wall time: 6.39 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4dFFuST94MZo","executionInfo":{"status":"ok","timestamp":1628092582706,"user_tz":-540,"elapsed":30232,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"4ff1af63-a652-4716-f8b4-2690d5941d34"},"source":["%%time\n","# 1000 samples\n","vi = VanishingIdeal()\n","vi.fit(images.view(-1, 28*28), 20.0, method=\"grad\", backend='torch', max_degree=5) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 27.3 s, sys: 2.88 s, total: 30.1 s\n","Wall time: 30 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1zyymqCy4UF5","executionInfo":{"status":"ok","timestamp":1628092612149,"user_tz":-540,"elapsed":583,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"92a9427a-8721-4887-a788-b2c3e3b169c9"},"source":["%%time\n","# 1000 samples\n","vi = VanishingIdeal()\n","vi.fit(images.view(-1, 28*28).cuda(), 10.0, method=\"grad\", backend='torch', max_degree=5) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 420 ms, sys: 4.38 ms, total: 424 ms\n","Wall time: 422 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Me7FJV844g9r","executionInfo":{"status":"ok","timestamp":1628093316799,"user_tz":-540,"elapsed":3559,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"5a2c5b6b-8eca-4a37-e419-141bb12e6c3a"},"source":["%%time\n","# 10000 samples\n","vi = VanishingIdeal()\n","vi.fit(images.view(-1, 28*28)[:1000], 10.0, method=\"grad\", backend='torch', max_degree=5) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 3.14 s, sys: 171 ms, total: 3.31 s\n","Wall time: 3.29 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LEEb5OAq6_I_"},"source":["import sys\n","\n","def get_size(obj, seen=None):\n","    \"\"\"Recursively finds size of objects\"\"\"\n","    size = sys.getsizeof(obj)\n","    if seen is None:\n","        seen = set()\n","    obj_id = id(obj)\n","    if obj_id in seen:\n","        return 0\n","    # Important mark as seen *before* entering recursion to gracefully handle\n","    # self-referential objects\n","    seen.add(obj_id)\n","    if isinstance(obj, dict):\n","        size += sum([get_size(v, seen) for v in obj.values()])\n","        size += sum([get_size(k, seen) for k in obj.keys()])\n","    elif hasattr(obj, '__dict__'):\n","        size += get_size(obj.__dict__, seen)\n","    elif hasattr(obj, '__iter__') and not isinstance(obj, (str, bytes, bytearray)):\n","        size += sum([get_size(i, seen) for i in obj])\n","    return size"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UKAwG80g5zou","executionInfo":{"status":"ok","timestamp":1628093292193,"user_tz":-540,"elapsed":231,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"0d2ba49b-9f8e-49eb-c306-76a4e5d340cb"},"source":["import sys\n","get_size(dataloader)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["8213"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eqcEWd8M8gCM","executionInfo":{"status":"ok","timestamp":1628093771136,"user_tz":-540,"elapsed":4279,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"5379bb47-c509-4907-92b2-9df54769035c"},"source":["%memit vi.fit(images.view(-1, 28*28)[:1000], 10.0, method=\"grad\", backend='torch', max_degree=5) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["peak memory: 1278.21 MiB, increment: 0.06 MiB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W_Ar6fnB7C8b","executionInfo":{"status":"ok","timestamp":1628093322397,"user_tz":-540,"elapsed":215,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"a43ed757-7dc7-4380-cb93-ac691a67ae2c"},"source":["import sys\n","get_size(vi)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6095"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"TOW-W5Rt8cAK"},"source":["from memory_profiler import profile"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":179},"id":"fdesVOky7jQg","executionInfo":{"status":"error","timestamp":1628093443058,"user_tz":-540,"elapsed":228,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"9db29eb0-6b0f-4674-fdfe-3789b43f6f4d"},"source":["import torch.autograd.profiler as profiler\n","print(prof.key_averages(group_by_stack_n=5).table(sort_by='self_cpu_time_total', row_limit=5))"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-e31b475eafa5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprofiler\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mprofiler\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprof\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkey_averages\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgroup_by_stack_n\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msort_by\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'self_cpu_time_total'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrow_limit\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'prof' is not defined"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9IyiakG_75Rr","executionInfo":{"status":"ok","timestamp":1628093538542,"user_tz":-540,"elapsed":2882,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"b9947400-e1e4-4fbd-f11a-1bc49fae3da6"},"source":["!pip install line_profiler memory_profiler\n","%load_ext line_profiler\n","%load_ext memory_profiler"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: line_profiler in /usr/local/lib/python3.7/dist-packages (3.3.0)\n","Requirement already satisfied: memory_profiler in /usr/local/lib/python3.7/dist-packages (0.58.0)\n","Requirement already satisfied: IPython>=0.13 in /usr/local/lib/python3.7/dist-packages (from line_profiler) (5.5.0)\n","Requirement already satisfied: prompt-toolkit<2.0.0,>=1.0.4 in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (1.0.18)\n","Requirement already satisfied: pexpect in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (4.8.0)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (0.7.5)\n","Requirement already satisfied: simplegeneric>0.8 in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (0.8.1)\n","Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (5.0.5)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (4.4.2)\n","Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (57.2.0)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (2.6.1)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.0.0,>=1.0.4->IPython>=0.13->line_profiler) (0.2.5)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.0.0,>=1.0.4->IPython>=0.13->line_profiler) (1.15.0)\n","Requirement already satisfied: ipython-genutils in /usr/local/lib/python3.7/dist-packages (from traitlets>=4.2->IPython>=0.13->line_profiler) (0.2.0)\n","Requirement already satisfied: psutil in /usr/local/lib/python3.7/dist-packages (from memory_profiler) (5.4.8)\n","Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.7/dist-packages (from pexpect->IPython>=0.13->line_profiler) (0.7.0)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9d-TlWBa0eDB","executionInfo":{"status":"ok","timestamp":1628092733419,"user_tz":-540,"elapsed":9112,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"4afaf39f-5e98-4c9d-ac40-f78c93ac4731"},"source":["%%time\n","u, d, vt = torch.linalg.svd(images.view(-1, 28*28))\n","print(d)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["tensor([1.6167e+03, 7.2190e+02, 6.4809e+02, 5.8412e+02, 5.4386e+02, 4.8803e+02,\n","        4.5014e+02, 4.0682e+02, 3.9355e+02, 3.5851e+02, 3.4802e+02, 3.4184e+02,\n","        3.2657e+02, 3.0976e+02, 3.0186e+02, 2.8941e+02, 2.8019e+02, 2.6679e+02,\n","        2.5655e+02, 2.5485e+02, 2.4456e+02, 2.4350e+02, 2.3874e+02, 2.3354e+02,\n","        2.2396e+02, 2.2229e+02, 2.1196e+02, 2.0722e+02, 2.0647e+02, 1.9872e+02,\n","        1.9559e+02, 1.8970e+02, 1.8678e+02, 1.8128e+02, 1.7997e+02, 1.7414e+02,\n","        1.7365e+02, 1.6791e+02, 1.6360e+02, 1.6006e+02, 1.5833e+02, 1.5593e+02,\n","        1.5365e+02, 1.5154e+02, 1.4728e+02, 1.4462e+02, 1.4361e+02, 1.4119e+02,\n","        1.3548e+02, 1.3468e+02, 1.3171e+02, 1.3000e+02, 1.2815e+02, 1.2666e+02,\n","        1.2441e+02, 1.2324e+02, 1.2086e+02, 1.1911e+02, 1.1866e+02, 1.1634e+02,\n","        1.1584e+02, 1.1423e+02, 1.1396e+02, 1.1136e+02, 1.0949e+02, 1.0781e+02,\n","        1.0612e+02, 1.0527e+02, 1.0238e+02, 1.0186e+02, 1.0159e+02, 1.0026e+02,\n","        9.8425e+01, 9.7166e+01, 9.5618e+01, 9.5522e+01, 9.3122e+01, 9.2736e+01,\n","        9.0458e+01, 8.9168e+01, 8.8005e+01, 8.7577e+01, 8.6432e+01, 8.5610e+01,\n","        8.5389e+01, 8.4856e+01, 8.3440e+01, 8.2591e+01, 8.2221e+01, 8.0718e+01,\n","        8.0104e+01, 7.8449e+01, 7.8065e+01, 7.7392e+01, 7.7224e+01, 7.6319e+01,\n","        7.5308e+01, 7.4710e+01, 7.4007e+01, 7.3281e+01, 7.2581e+01, 7.2127e+01,\n","        7.1755e+01, 7.0044e+01, 6.9495e+01, 6.8863e+01, 6.8781e+01, 6.8371e+01,\n","        6.7465e+01, 6.6951e+01, 6.5975e+01, 6.5359e+01, 6.5063e+01, 6.4414e+01,\n","        6.4039e+01, 6.3518e+01, 6.2992e+01, 6.2799e+01, 6.2460e+01, 6.1877e+01,\n","        6.1020e+01, 6.0790e+01, 6.0600e+01, 6.0237e+01, 5.9862e+01, 5.9389e+01,\n","        5.8717e+01, 5.8429e+01, 5.7985e+01, 5.7794e+01, 5.7461e+01, 5.7221e+01,\n","        5.6783e+01, 5.6536e+01, 5.5748e+01, 5.5560e+01, 5.5161e+01, 5.4762e+01,\n","        5.4150e+01, 5.4090e+01, 5.3708e+01, 5.3344e+01, 5.2828e+01, 5.2631e+01,\n","        5.2217e+01, 5.2056e+01, 5.1448e+01, 5.1026e+01, 5.0823e+01, 5.0744e+01,\n","        5.0401e+01, 4.9867e+01, 4.9543e+01, 4.9447e+01, 4.9266e+01, 4.9165e+01,\n","        4.8899e+01, 4.8683e+01, 4.8137e+01, 4.7617e+01, 4.7271e+01, 4.6975e+01,\n","        4.6660e+01, 4.6474e+01, 4.6080e+01, 4.5875e+01, 4.5543e+01, 4.5215e+01,\n","        4.5133e+01, 4.4973e+01, 4.4695e+01, 4.4648e+01, 4.4371e+01, 4.4266e+01,\n","        4.4158e+01, 4.3861e+01, 4.3721e+01, 4.3338e+01, 4.3180e+01, 4.2846e+01,\n","        4.2812e+01, 4.2607e+01, 4.2277e+01, 4.2156e+01, 4.2004e+01, 4.1846e+01,\n","        4.1708e+01, 4.1626e+01, 4.1469e+01, 4.1257e+01, 4.1015e+01, 4.0670e+01,\n","        4.0623e+01, 4.0378e+01, 4.0117e+01, 3.9965e+01, 3.9625e+01, 3.9546e+01,\n","        3.9352e+01, 3.9216e+01, 3.9017e+01, 3.8778e+01, 3.8681e+01, 3.8519e+01,\n","        3.8156e+01, 3.8087e+01, 3.7978e+01, 3.7840e+01, 3.7739e+01, 3.7610e+01,\n","        3.7558e+01, 3.7501e+01, 3.7343e+01, 3.7057e+01, 3.6929e+01, 3.6776e+01,\n","        3.6710e+01, 3.6546e+01, 3.6386e+01, 3.6312e+01, 3.6056e+01, 3.5914e+01,\n","        3.5655e+01, 3.5537e+01, 3.5441e+01, 3.5396e+01, 3.5254e+01, 3.5136e+01,\n","        3.4907e+01, 3.4840e+01, 3.4512e+01, 3.4491e+01, 3.4379e+01, 3.4213e+01,\n","        3.4165e+01, 3.4009e+01, 3.3945e+01, 3.3846e+01, 3.3667e+01, 3.3549e+01,\n","        3.3259e+01, 3.3179e+01, 3.3124e+01, 3.2956e+01, 3.2837e+01, 3.2669e+01,\n","        3.2601e+01, 3.2451e+01, 3.2434e+01, 3.2222e+01, 3.2140e+01, 3.2018e+01,\n","        3.1985e+01, 3.1878e+01, 3.1828e+01, 3.1648e+01, 3.1414e+01, 3.1298e+01,\n","        3.1223e+01, 3.1190e+01, 3.1176e+01, 3.1016e+01, 3.0924e+01, 3.0746e+01,\n","        3.0655e+01, 3.0604e+01, 3.0485e+01, 3.0308e+01, 3.0213e+01, 3.0169e+01,\n","        3.0039e+01, 2.9935e+01, 2.9695e+01, 2.9625e+01, 2.9491e+01, 2.9359e+01,\n","        2.9328e+01, 2.9221e+01, 2.9181e+01, 2.9103e+01, 2.8998e+01, 2.8826e+01,\n","        2.8708e+01, 2.8645e+01, 2.8548e+01, 2.8431e+01, 2.8243e+01, 2.8223e+01,\n","        2.8123e+01, 2.8114e+01, 2.7909e+01, 2.7799e+01, 2.7673e+01, 2.7641e+01,\n","        2.7413e+01, 2.7359e+01, 2.7256e+01, 2.7158e+01, 2.7068e+01, 2.6999e+01,\n","        2.6903e+01, 2.6820e+01, 2.6782e+01, 2.6639e+01, 2.6634e+01, 2.6490e+01,\n","        2.6252e+01, 2.6207e+01, 2.6048e+01, 2.5980e+01, 2.5901e+01, 2.5755e+01,\n","        2.5680e+01, 2.5555e+01, 2.5486e+01, 2.5411e+01, 2.5351e+01, 2.5188e+01,\n","        2.5149e+01, 2.5003e+01, 2.4955e+01, 2.4937e+01, 2.4825e+01, 2.4646e+01,\n","        2.4601e+01, 2.4548e+01, 2.4452e+01, 2.4290e+01, 2.4222e+01, 2.4166e+01,\n","        2.4069e+01, 2.3985e+01, 2.3850e+01, 2.3779e+01, 2.3735e+01, 2.3706e+01,\n","        2.3556e+01, 2.3514e+01, 2.3378e+01, 2.3267e+01, 2.3224e+01, 2.3139e+01,\n","        2.3002e+01, 2.2894e+01, 2.2867e+01, 2.2844e+01, 2.2601e+01, 2.2560e+01,\n","        2.2515e+01, 2.2484e+01, 2.2188e+01, 2.2164e+01, 2.2138e+01, 2.2029e+01,\n","        2.1917e+01, 2.1877e+01, 2.1843e+01, 2.1692e+01, 2.1629e+01, 2.1409e+01,\n","        2.1408e+01, 2.1301e+01, 2.1269e+01, 2.1068e+01, 2.0920e+01, 2.0872e+01,\n","        2.0789e+01, 2.0715e+01, 2.0659e+01, 2.0584e+01, 2.0500e+01, 2.0408e+01,\n","        2.0278e+01, 2.0231e+01, 2.0129e+01, 2.0061e+01, 2.0018e+01, 1.9898e+01,\n","        1.9877e+01, 1.9707e+01, 1.9510e+01, 1.9407e+01, 1.9392e+01, 1.9292e+01,\n","        1.9176e+01, 1.9057e+01, 1.8857e+01, 1.8830e+01, 1.8728e+01, 1.8577e+01,\n","        1.8495e+01, 1.8464e+01, 1.8330e+01, 1.8232e+01, 1.8111e+01, 1.7974e+01,\n","        1.7896e+01, 1.7799e+01, 1.7720e+01, 1.7608e+01, 1.7475e+01, 1.7365e+01,\n","        1.7273e+01, 1.7188e+01, 1.7064e+01, 1.6974e+01, 1.6917e+01, 1.6748e+01,\n","        1.6702e+01, 1.6489e+01, 1.6391e+01, 1.6273e+01, 1.6242e+01, 1.6204e+01,\n","        1.6064e+01, 1.5932e+01, 1.5876e+01, 1.5743e+01, 1.5732e+01, 1.5561e+01,\n","        1.5555e+01, 1.5420e+01, 1.5279e+01, 1.5130e+01, 1.5108e+01, 1.4922e+01,\n","        1.4770e+01, 1.4728e+01, 1.4624e+01, 1.4556e+01, 1.4447e+01, 1.4320e+01,\n","        1.4214e+01, 1.4192e+01, 1.4041e+01, 1.4005e+01, 1.3855e+01, 1.3843e+01,\n","        1.3735e+01, 1.3582e+01, 1.3554e+01, 1.3410e+01, 1.3325e+01, 1.3240e+01,\n","        1.3080e+01, 1.3028e+01, 1.3010e+01, 1.2828e+01, 1.2691e+01, 1.2668e+01,\n","        1.2657e+01, 1.2517e+01, 1.2429e+01, 1.2321e+01, 1.2247e+01, 1.2142e+01,\n","        1.2133e+01, 1.2106e+01, 1.1994e+01, 1.1923e+01, 1.1885e+01, 1.1660e+01,\n","        1.1629e+01, 1.1553e+01, 1.1489e+01, 1.1347e+01, 1.1323e+01, 1.1271e+01,\n","        1.1202e+01, 1.1114e+01, 1.1001e+01, 1.0926e+01, 1.0873e+01, 1.0841e+01,\n","        1.0697e+01, 1.0570e+01, 1.0514e+01, 1.0501e+01, 1.0392e+01, 1.0339e+01,\n","        1.0306e+01, 1.0218e+01, 1.0143e+01, 1.0030e+01, 9.9029e+00, 9.8810e+00,\n","        9.7642e+00, 9.7499e+00, 9.6223e+00, 9.5878e+00, 9.5772e+00, 9.5216e+00,\n","        9.4537e+00, 9.2944e+00, 9.2209e+00, 9.0771e+00, 8.9664e+00, 8.9484e+00,\n","        8.7823e+00, 8.6858e+00, 8.6484e+00, 8.5981e+00, 8.4696e+00, 8.3973e+00,\n","        8.3359e+00, 8.3019e+00, 8.2597e+00, 8.1693e+00, 8.0554e+00, 8.0344e+00,\n","        7.8916e+00, 7.8362e+00, 7.8249e+00, 7.7170e+00, 7.6985e+00, 7.5433e+00,\n","        7.4762e+00, 7.4066e+00, 7.3674e+00, 7.3429e+00, 7.2530e+00, 7.2109e+00,\n","        7.0383e+00, 6.9895e+00, 6.9264e+00, 6.9020e+00, 6.8519e+00, 6.8054e+00,\n","        6.7308e+00, 6.6669e+00, 6.6014e+00, 6.5786e+00, 6.4232e+00, 6.3630e+00,\n","        6.3218e+00, 6.2714e+00, 6.1990e+00, 6.1742e+00, 6.0896e+00, 6.0058e+00,\n","        5.9426e+00, 5.9368e+00, 5.9052e+00, 5.7900e+00, 5.7334e+00, 5.7154e+00,\n","        5.6882e+00, 5.6520e+00, 5.5853e+00, 5.5342e+00, 5.5086e+00, 5.2683e+00,\n","        5.2280e+00, 5.1900e+00, 5.1160e+00, 5.0315e+00, 4.9660e+00, 4.8972e+00,\n","        4.8348e+00, 4.7852e+00, 4.6957e+00, 4.6070e+00, 4.4658e+00, 4.4407e+00,\n","        4.3396e+00, 4.3156e+00, 4.2827e+00, 4.2027e+00, 4.1827e+00, 4.1692e+00,\n","        4.1578e+00, 3.9477e+00, 3.8884e+00, 3.8842e+00, 3.8449e+00, 3.8160e+00,\n","        3.7827e+00, 3.7541e+00, 3.7390e+00, 3.6931e+00, 3.6683e+00, 3.6040e+00,\n","        3.5712e+00, 3.5258e+00, 3.4837e+00, 3.4032e+00, 3.3745e+00, 3.3483e+00,\n","        3.2849e+00, 3.2438e+00, 3.1839e+00, 3.0896e+00, 3.0626e+00, 3.0397e+00,\n","        2.9939e+00, 2.8951e+00, 2.8912e+00, 2.8810e+00, 2.8456e+00, 2.7305e+00,\n","        2.7016e+00, 2.6631e+00, 2.6275e+00, 2.5535e+00, 2.5362e+00, 2.3910e+00,\n","        2.3759e+00, 2.3167e+00, 2.3047e+00, 2.2651e+00, 2.2582e+00, 2.2470e+00,\n","        2.1988e+00, 2.0921e+00, 2.0545e+00, 2.0226e+00, 2.0009e+00, 1.9258e+00,\n","        1.8917e+00, 1.8125e+00, 1.6928e+00, 1.6651e+00, 1.6459e+00, 1.6299e+00,\n","        1.5652e+00, 1.5503e+00, 1.5035e+00, 1.4488e+00, 1.4385e+00, 1.3958e+00,\n","        1.3429e+00, 1.2438e+00, 1.1804e+00, 1.1007e+00, 1.0834e+00, 9.5819e-01,\n","        9.1287e-01, 8.9180e-01, 8.8835e-01, 8.8328e-01, 8.5931e-01, 8.4692e-01,\n","        8.1299e-01, 7.6147e-01, 6.9327e-01, 5.8767e-01, 5.6499e-01, 5.2952e-01,\n","        5.2179e-01, 4.4751e-01, 2.6490e-01, 2.5525e-01, 2.3180e-01, 2.1612e-01,\n","        1.3414e-01, 1.2833e-01, 5.9395e-02, 5.3913e-02, 4.7651e-02, 2.8054e-02,\n","        7.6493e-03, 5.8954e-03, 2.1984e-03, 1.9094e-04, 1.0667e-04, 1.0244e-04,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05, 9.2200e-05,\n","        9.2200e-05, 9.2200e-05, 9.2200e-05, 4.4732e-05])\n","CPU times: user 8.72 s, sys: 175 ms, total: 8.89 s\n","Wall time: 8.86 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":162},"id":"cFiB6TlX14UH","executionInfo":{"status":"error","timestamp":1628091958611,"user_tz":-540,"elapsed":223,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"9c55dc0e-6f91-43c6-8158-141221ff9b1a"},"source":["u, d, vt = torch.linalg.svd(data)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-f8201bf67705>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mu\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0md\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msvd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m: \"svd_cuda_gesvdj\" not implemented for 'Byte'"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z8pccutx2Prm","executionInfo":{"status":"ok","timestamp":1628092040572,"user_tz":-540,"elapsed":209,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"fc42e634-6ea2-46f4-bc95-221fdda1b4ba"},"source":["typedata"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[0, 0, 0,  ..., 0, 0, 0],\n","        [0, 0, 0,  ..., 0, 0, 0],\n","        [0, 0, 0,  ..., 0, 0, 0],\n","        ...,\n","        [0, 0, 0,  ..., 0, 0, 0],\n","        [0, 0, 0,  ..., 0, 0, 0],\n","        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0', dtype=torch.uint8)"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"PfnJa-1p1kdk"},"source":["u, d, vt =torch.linalg.svd(X)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"jnGtaoXHqzpi","executionInfo":{"status":"ok","timestamp":1628091859829,"user_tz":-540,"elapsed":291,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"d737e86b-7fa6-4df3-8eb7-7aa189d5cd4a"},"source":["theta = [np.pi*i/3 for i in range(6)]\n","X = np.vstack((np.cos(theta), np.sin(theta))).T\n","X = torch.tensor(X)\n","\n","plt.plot(X[:,0], X[:,1], \"o\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f639a428050>]"]},"metadata":{"tags":[]},"execution_count":11},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XSuLWVXgrLze","executionInfo":{"status":"ok","timestamp":1628089743719,"user_tz":-540,"elapsed":436,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"b7c20758-0447-414b-efcc-aa54d59c8c26"},"source":["vi = VanishingIdeal()\n","vi.fit(X, 0.01, method=\"grad\", backend='torch') \n","output = vi.evaluate(X)\n","print(X.device, vi.device, output.device)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["cpu cpu cpu\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-6L1hTN8rTSe","executionInfo":{"status":"ok","timestamp":1628089776338,"user_tz":-540,"elapsed":342,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"a8fbba37-b418-4218-f691-781bddcb66ee"},"source":["Z = X.cuda()\n","vi.to(Z.device)\n","output = vi.evaluate(Z)\n","print(Z.device, vi.device, output.device)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["cuda:0 cuda:0 cuda:0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"tkay9nnsr2LR","executionInfo":{"status":"ok","timestamp":1628089873759,"user_tz":-540,"elapsed":4154,"user":{"displayName":"Hiroshi Kera","photoUrl":"","userId":"01053422096626415082"}},"outputId":"e2df8dad-d715-4dd3-e93c-353fec633cc7"},"source":["vi.to('cpu')\n","vi.plot(Z.to('cpu'), splitshow=True)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"WzAa4lV2tzW1"},"source":[""],"execution_count":null,"outputs":[]}]}